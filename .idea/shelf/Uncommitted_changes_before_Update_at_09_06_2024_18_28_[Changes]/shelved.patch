Index: lecture#13/subordinate.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\nEmployee: Daria Veresha\r\nUUID: a9dd715d-80d2-4fd5-a697-ede615f1f9c1\r\nPosition: Tester\r\nLevel: Junior\r\nDepartment: IT\r\nLimelight Networks login time: 2024-06-07 14:10:15.286628\r\nWorking hours: 10\r\nLimelight Networks exit time: 2024-06-08 00:10:15.288215\r\nFinancial data of Daria Veresha ->\r\nSalary: 1000$\r\nIncome with the bonus: 1150.0$\r\nBank information of Daria Veresha ->\r\nID account: 27369275-df05-448b-95ee-3544c33ffa27\r\nChecking account: 418803172\r\nBank card number: 7961146446099277\r\n\r\n
===================================================================
diff --git a/lecture#13/subordinate.txt b/lecture#13/subordinate.txt
--- a/lecture#13/subordinate.txt	
+++ b/lecture#13/subordinate.txt	
@@ -16,3 +16,19 @@
 Checking account: 418803172
 Bank card number: 7961146446099277
 
+Employee: Daria Veresha
+UUID: ce3518d5-f9bc-4cd8-b2b0-d3d543baf387
+Position: Tester
+Level: Junior
+Department: IT
+Limelight Networks login time: 2024-06-09 17:57:59.294108
+Working hours: 10
+Limelight Networks exit time: 2024-06-10 03:57:59.297156
+Financial data of Daria Veresha ->
+Salary: 1000$
+Income with the bonus: 1150.0$
+Bank information of Daria Veresha ->
+ID account: e4f05eb8-4e73-421a-9ad3-6da980dfc0dd
+Checking account: 894854805
+Bank card number: 4067222560700418
+
Index: lecture#13/supervisor.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\nEmployee: Alex Litvinov\r\nUUID: 82a2235f-092e-4c9b-a2b2-f5a08cf7269d\r\nPosition: Qa Engineer\r\nLevel: Senior\r\nDepartment: IT\r\nLimelight Networks login time: 2024-06-07 14:10:31.879793\r\nWorking hours: 7\r\nLimelight Networks exit time: 2024-06-07 21:10:31.879793\r\nFinancial data of Alex Litvinov ->\r\nSalary: 12000$\r\nIncome with the bonus: 19800.0$\r\nBank information of Alex Litvinov ->\r\nID account: 7d5f6478-21a0-427e-8083-7ee809e9cdab\r\nChecking account: 565825347\r\nBank card number: 4557662848891714\r\n\r\n
===================================================================
diff --git a/lecture#13/supervisor.txt b/lecture#13/supervisor.txt
--- a/lecture#13/supervisor.txt	
+++ b/lecture#13/supervisor.txt	
@@ -16,3 +16,19 @@
 Checking account: 565825347
 Bank card number: 4557662848891714
 
+Employee: Alex Litvinov
+UUID: 0d1b087e-de55-4560-891e-b03838d5b615
+Position: Qa Engineer
+Level: Senior
+Department: IT
+Limelight Networks login time: 2024-06-09 17:58:14.303211
+Working hours: 7
+Limelight Networks exit time: 2024-06-10 00:58:14.303211
+Financial data of Alex Litvinov ->
+Salary: 12000$
+Income with the bonus: 19800.0$
+Bank information of Alex Litvinov ->
+ID account: f0f6d991-3f24-43fa-870d-e25ca01de84c
+Checking account: 552798687
+Bank card number: 4620786631559290
+
Index: lecture#14/hw#37.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"Task 37.\"\"\"\r\n\r\n\r\nclass Pixel:\r\n\r\n    def __init__(self, red, green, blue):\r\n        if not 0 <= red <= 255 or not 0 <= green <= 255 or not 0 <= blue <= 255:\r\n            raise ValueError('Components must be in the range [0 .. 255]')\r\n        self.__red = int(red)\r\n        self.__green = int(green)\r\n        self.__blue = int(blue)\r\n\r\n    @property\r\n    def red(self):\r\n        \"\"\"Getter for red component.\"\"\"\r\n        return self.__red\r\n\r\n    @property\r\n    def green(self):\r\n        \"\"\"Getter for green component.\"\"\"\r\n        return self.__green\r\n\r\n    @property\r\n    def blue(self):\r\n        \"\"\"Getter for blue component.\"\"\"\r\n        return self.__blue\r\n\r\n    def __add__(self, other):\r\n        \"\"\"Sum of two pixels.\"\"\"\r\n        if self.__red + other.__red > 255 or self.__green + other.__green > 255 or self.__blue + other.__blue > 255:\r\n            return Pixel(255, 255, 255)\r\n        else:\r\n            return Pixel(self.__red + other.__red, self.__green + other.__green, self.__blue + other.__blue)\r\n        # self.__red = 255 if self.__red + other.__red > 255 else self.__red + other.__red\r\n        # self.__green = 255 if self.__green + other.__green > 255 else self.__green + other.__green\r\n        # self.__blue = 255 if self.__blue + other.__blue > 255 else self.__blue + other.__blue\r\n        # return Pixel(self.__red, self.__green, self.__blue)\r\n\r\n    def __sub__(self, other):\r\n        \"\"\"Subtraction of two pixels.\"\"\"\r\n        if self.__red - other.__red < 0 or self.__green - other.__green < 0 or self.__blue - other.__blue < 0:\r\n            return Pixel(0, 0, 0)\r\n        else:\r\n            return Pixel(self.__red - other.__red, self.__green - other.__green, self.__blue - other.__blue)\r\n        # self.__red = 0 if self.__red - other.__red < 0 else self.__red - other.__red\r\n        # self.__green = 0 if self.__green - other.__green < 0 else self.__green - other.__green\r\n        # self.__blue = 0 if self.__blue - other.__blue < 0 else self.__blue - other.__blue\r\n        # return Pixel(self.__red, self.__green, self.__blue)\r\n\r\n    def __mul__(self, other):\r\n        \"\"\"Multiplication of a pixel by a number.\"\"\"\r\n        if isinstance(other, (int, float)):\r\n            if other <= 0:\r\n                raise ValueError('The number must be greater than zero')\r\n            elif self.__red * other > 255 or self.__green * other > 255 or self.__blue * other > 255:\r\n                return Pixel(255, 255, 255)\r\n            else:\r\n                return Pixel(self.__red * other, self.__green * other, self.__blue * other)\r\n            # self.__red = 255 if self.__red * other > 255 else self.__red * other\r\n            # self.__green = 255 if self.__green * other > 255 else self.__green * other\r\n            # self.__blue = 255 if self.__blue * other > 255 else self.__blue * other\r\n            # return Pixel(self.__red, self.__green, self.__blue)\r\n        raise TypeError('The number must be an integer or a floating point number')\r\n\r\n    def __rmul__(self, other):\r\n        \"\"\"Multiplication of a pixel by a number.\"\"\"\r\n        return self.__mul__(other)\r\n\r\n    def __truediv__(self, other):\r\n        \"\"\"Division of a pixel by a number.\"\"\"\r\n        if isinstance(other, (int, float)):\r\n            if other <= 0:\r\n                raise ValueError('The number must be greater than zero')\r\n            return Pixel(self.__red / other, self.__green / other, self.__blue / other)\r\n        raise TypeError('The number must be an integer or a floating point number')\r\n\r\n    def __eq__(self, other):\r\n        \"\"\"Comparison of two pixels.\"\"\"\r\n        return self.__red == other.__red and self.__green == other.__green and self.__blue == other.__blue\r\n\r\n    def __str__(self):\r\n        \"\"\"String representation of a pixel.\"\"\"\r\n        return f'\\tRed: {self.__red}\\n' \\\r\n               f'\\tGreen: {self.__green}\\n' \\\r\n               f'\\tBlue: {self.__blue}' \\\r\n\r\n\r\n    def __repr__(self):\r\n        \"\"\"Representation of a pixel.\"\"\"\r\n        return f'Pixel({self.__red}, {self.__green}, {self.__blue})'\r\n\r\n\r\n# Tests\r\npixel1 = Pixel(50, 100.56, 200)\r\npixel2 = Pixel(55, 155, 255)\r\n\r\npixel3 = Pixel(255, 0, 187.78)\r\npixel4 = Pixel(0.9999, 10, 80)\r\n\r\npixel5 = Pixel(10, 21, 0)\r\n\r\npixel6 = Pixel(254.1, 255, 254.8956)\r\n\r\npixel7 = Pixel(1, 2, 0)\r\npixel8 = Pixel(10, 11, 12)\r\npixel9 = Pixel(10, 11, 12)\r\n\r\nprint('--------------------str object-------------')\r\nprint(str(pixel1))\r\nprint('--------------------repr object------------')\r\nprint(repr(pixel2))\r\nprint('--------------------sum--------------------')\r\nprint(repr(pixel1 + pixel2))\r\nprint('--------------------sub--------------------')\r\nprint(repr(pixel3 - pixel4))\r\nprint('--------------------mul--------------------')\r\nprint(repr(pixel5 * 2.5))\r\nprint('--------------------mul--------------------')\r\n# print(repr('b' * pixel5))\r\nprint('--------------------div--------------------')\r\nprint(repr(pixel6 / 2))\r\nprint('--------------------eq---------------------')\r\nprint(repr(pixel7 == pixel8))\r\nprint(repr(pixel8 == pixel9))\r\n# print('-------------------------------------------')\r\n# print(repr(id(pixel5)))\r\n# print(repr(id(pixel5 * 2.5)))\r\n
===================================================================
diff --git a/lecture#14/hw#37.py b/lecture#14/hw#37.py
--- a/lecture#14/hw#37.py	
+++ b/lecture#14/hw#37.py	
@@ -1,4 +1,5 @@
 """Task 37."""
+from __future__ import division
 
 
 class Pixel:
@@ -6,9 +7,9 @@
     def __init__(self, red, green, blue):
         if not 0 <= red <= 255 or not 0 <= green <= 255 or not 0 <= blue <= 255:
             raise ValueError('Components must be in the range [0 .. 255]')
-        self.__red = int(red)
-        self.__green = int(green)
-        self.__blue = int(blue)
+        self.__red = red if isinstance(red, int) else int(red)
+        self.__green = green if isinstance(green, int) else int(green)
+        self.__blue = blue if isinstance(blue, int) else int(blue)
 
     @property
     def red(self):
@@ -27,39 +28,30 @@
 
     def __add__(self, other):
         """Sum of two pixels."""
-        if self.__red + other.__red > 255 or self.__green + other.__green > 255 or self.__blue + other.__blue > 255:
-            return Pixel(255, 255, 255)
-        else:
-            return Pixel(self.__red + other.__red, self.__green + other.__green, self.__blue + other.__blue)
-        # self.__red = 255 if self.__red + other.__red > 255 else self.__red + other.__red
-        # self.__green = 255 if self.__green + other.__green > 255 else self.__green + other.__green
-        # self.__blue = 255 if self.__blue + other.__blue > 255 else self.__blue + other.__blue
-        # return Pixel(self.__red, self.__green, self.__blue)
+        self.__red = 255 if self.__red + other.__red > 255 else self.__red + other.__red
+        self.__green = 255 if self.__green + other.__green > 255 else self.__green + other.__green
+        self.__blue = 255 if self.__blue + other.__blue > 255 else self.__blue + other.__blue
+
+        return Pixel(self.__red, self.__green, self.__blue)
 
     def __sub__(self, other):
         """Subtraction of two pixels."""
-        if self.__red - other.__red < 0 or self.__green - other.__green < 0 or self.__blue - other.__blue < 0:
-            return Pixel(0, 0, 0)
-        else:
-            return Pixel(self.__red - other.__red, self.__green - other.__green, self.__blue - other.__blue)
-        # self.__red = 0 if self.__red - other.__red < 0 else self.__red - other.__red
-        # self.__green = 0 if self.__green - other.__green < 0 else self.__green - other.__green
-        # self.__blue = 0 if self.__blue - other.__blue < 0 else self.__blue - other.__blue
-        # return Pixel(self.__red, self.__green, self.__blue)
+        self.__red = 0 if self.__red - other.__red < 0 else self.__red - other.__red
+        self.__green = 0 if self.__green - other.__green < 0 else self.__green - other.__green
+        self.__blue = 0 if self.__blue - other.__blue < 0 else self.__blue - other.__blue
+
+        return Pixel(self.__red, self.__green, self.__blue)
 
     def __mul__(self, other):
         """Multiplication of a pixel by a number."""
         if isinstance(other, (int, float)):
             if other <= 0:
                 raise ValueError('The number must be greater than zero')
-            elif self.__red * other > 255 or self.__green * other > 255 or self.__blue * other > 255:
-                return Pixel(255, 255, 255)
-            else:
-                return Pixel(self.__red * other, self.__green * other, self.__blue * other)
-            # self.__red = 255 if self.__red * other > 255 else self.__red * other
-            # self.__green = 255 if self.__green * other > 255 else self.__green * other
-            # self.__blue = 255 if self.__blue * other > 255 else self.__blue * other
-            # return Pixel(self.__red, self.__green, self.__blue)
+            self.__red = 255 if self.__red * other > 255 else self.__red * other
+            self.__green = 255 if self.__green * other > 255 else self.__green * other
+            self.__blue = 255 if self.__blue * other > 255 else self.__blue * other
+
+            return Pixel(self.__red, self.__green, self.__blue)
         raise TypeError('The number must be an integer or a floating point number')
 
     def __rmul__(self, other):
@@ -71,11 +63,30 @@
         if isinstance(other, (int, float)):
             if other <= 0:
                 raise ValueError('The number must be greater than zero')
+            elif self.__red == 0 or self.__green == 0 or self.__blue == 0:
+                raise ValueError('The pixel components must be greater than zero')
+            elif self.__red / other > 255 or self.__green / other > 255 or self.__blue / other > 255:
+                return Pixel(255, 255, 255)
+
             return Pixel(self.__red / other, self.__green / other, self.__blue / other)
         raise TypeError('The number must be an integer or a floating point number')
 
+    def __rtruediv__(self, other):
+        """Division of a number by pixel."""
+        if isinstance(other, (int, float)):
+            if other <= 0:
+                raise ValueError('The number must be greater than zero')
+            elif self.__red == 0 or self.__green == 0 or self.__blue == 0:
+                raise ValueError('The pixel components must be greater than zero')
+            elif other / self.__red > 255 or other / self.__green > 255 or other / self.__blue > 255:
+                return Pixel(255, 255, 255)
+
+            return Pixel(other / self.__red, other / self.__green, other / self.__blue)
+
     def __eq__(self, other):
         """Comparison of two pixels."""
+        if not isinstance(other, Pixel):
+            return False
         return self.__red == other.__red and self.__green == other.__green and self.__blue == other.__blue
 
     def __str__(self):
@@ -91,37 +102,48 @@
 
 
 # Tests
-pixel1 = Pixel(50, 100.56, 200)
-pixel2 = Pixel(55, 155, 255)
+pixel1 = Pixel(255.00, 0, 0)
+pixel2 = Pixel(255.00, 0, 0)
 
 pixel3 = Pixel(255, 0, 187.78)
 pixel4 = Pixel(0.9999, 10, 80)
 
-pixel5 = Pixel(10, 21, 0)
+pixel5 = Pixel(102, 103, 0)
 
-pixel6 = Pixel(254.1, 255, 254.8956)
+pixel6 = Pixel(255, 255, 10)
 
 pixel7 = Pixel(1, 2, 0)
-pixel8 = Pixel(10, 11, 12)
-pixel9 = Pixel(10, 11, 12)
+pixel8 = Pixel(10.01, 11, 12)
+pixel9 = Pixel(10.01, 11, 12)
 
 print('--------------------str object-------------')
 print(str(pixel1))
 print('--------------------repr object------------')
 print(repr(pixel2))
+print(repr(pixel3))
+print(repr(pixel4))
+print(repr(pixel5))
+print(repr(pixel6))
+print(repr(pixel7))
+print(repr(pixel8))
+print(repr(pixel9))
 print('--------------------sum--------------------')
 print(repr(pixel1 + pixel2))
 print('--------------------sub--------------------')
 print(repr(pixel3 - pixel4))
 print('--------------------mul--------------------')
 print(repr(pixel5 * 2.5))
+print(repr(2.5 * pixel5))
 print('--------------------mul--------------------')
 # print(repr('b' * pixel5))
 print('--------------------div--------------------')
-print(repr(pixel6 / 2))
+print(repr(pixel6 / 255))
+print(repr(255 / pixel6))
 print('--------------------eq---------------------')
 print(repr(pixel7 == pixel8))
 print(repr(pixel8 == pixel9))
-# print('-------------------------------------------')
+print(repr(pixel1 == 'pixel2'))
+print(repr(pixel1 == 123))
+print('-------------------------------------------')
 # print(repr(id(pixel5)))
 # print(repr(id(pixel5 * 2.5)))
Index: lecture#13/data_of_employees.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nLatest data of Daria Veresha ->\r\nLevel: Junior\r\nPosition: Tester\r\nExperience: 5 years\r\nProject: Selenium\r\nProfit from the project: 1300.0$\r\nProject: Pytest\r\nProfit from the project: 1300.0$\r\n\r\nLatest data of Alex Litvinov ->\r\nLevel: Senior\r\nPosition: Qa Engineer\r\nPlace of work: Epam\r\nTerm of work: 7 years\r\nPlace of work: Google\r\nTerm of work: 6 years\r\n
===================================================================
diff --git a/lecture#13/data_of_employees.txt b/lecture#13/data_of_employees.txt
--- a/lecture#13/data_of_employees.txt	
+++ b/lecture#13/data_of_employees.txt	
@@ -15,3 +15,20 @@
 Term of work: 7 years
 Place of work: Google
 Term of work: 6 years
+
+Latest data of Daria Veresha ->
+Level: Junior
+Position: Tester
+Experience: 5 years
+Project: Selenium
+Profit from the project: 1300.0$
+Project: Pytest
+Profit from the project: 1300.0$
+
+Latest data of Alex Litvinov ->
+Level: Senior
+Position: Qa Engineer
+Place of work: Epam
+Term of work: 10 years
+Place of work: Google
+Term of work: 7 years
Index: lecture#13/checkpoint.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Employee: Daria Veresha\r\nUUID: a9dd715d-80d2-4fd5-a697-ede615f1f9c1\r\nPosition: Tester\r\nDepartment: IT\r\nLimelight Networks login time: 2024-06-07 14:10:17.299218\r\nWorking hours: 10\r\nApproximate Limelight Networks exit time: 2024-06-08 00:10:17.299218\r\n\r\nEmployee: Alex Litvinov\r\nUUID: 82a2235f-092e-4c9b-a2b2-f5a08cf7269d\r\nPosition: Qa Engineer\r\nDepartment: IT\r\nLimelight Networks login time: 2024-06-07 14:10:33.886504\r\nWorking hours: 7\r\nApproximate Limelight Networks exit time: 2024-06-07 21:10:33.886504\r\n\r\nVisitor: Jon Smith\r\nMeeting curator: Alex Litvinov\r\nPosition: Back-End\r\nLevel: Trainee\r\nDepartment: IT\r\nLimelight Networks login time: 2024-06-07 14:10:45.797650\r\nApproximate Limelight Networks exit time: 2024-06-07 14:30:45.797650\r\n\r\n
===================================================================
diff --git a/lecture#13/checkpoint.txt b/lecture#13/checkpoint.txt
--- a/lecture#13/checkpoint.txt	
+++ b/lecture#13/checkpoint.txt	
@@ -22,3 +22,27 @@
 Limelight Networks login time: 2024-06-07 14:10:45.797650
 Approximate Limelight Networks exit time: 2024-06-07 14:30:45.797650
 
+Employee: Daria Veresha
+UUID: ce3518d5-f9bc-4cd8-b2b0-d3d543baf387
+Position: Tester
+Department: IT
+Limelight Networks login time: 2024-06-09 17:58:01.305537
+Working hours: 10
+Approximate Limelight Networks exit time: 2024-06-10 03:58:01.305537
+
+Employee: Alex Litvinov
+UUID: 0d1b087e-de55-4560-891e-b03838d5b615
+Position: Qa Engineer
+Department: IT
+Limelight Networks login time: 2024-06-09 17:58:16.308548
+Working hours: 7
+Approximate Limelight Networks exit time: 2024-06-10 00:58:16.308548
+
+Visitor: Jon Smith
+Meeting curator: Alex Litvinov
+Position: Back-End
+Level: Trainee
+Department: IT
+Limelight Networks login time: 2024-06-09 17:58:28.154603
+Approximate Limelight Networks exit time: 2024-06-09 18:18:28.154603
+
